/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict
 */

import type { CompiledStyles } from '@stylexjs/stylex/lib/StyleXTypes';
import type { ReactDOMStyleProps } from '../../types/renderer.web';
import type { StrictSvgProps } from '../../../dist/types/StrictSvgProps';

import * as React from 'react';
import * as stylex from '@stylexjs/stylex';
import { errorMsg } from '../../shared/logUtils';
import { isSvgPropAllowed } from '../../shared/isSvgPropAllowed';

// $FlowFixMe[unclear-type]
function validateStrictProps(props: any) {
  Object.keys(props).forEach((key) => {
    const isValid = isSvgPropAllowed(key);
    if (!isValid) {
      errorMsg(`invalid prop "${key}"`);
      delete props[key];
    }
  });
}

export function createStrictDOMSvgComponent<T, P: StrictSvgProps>(
  TagName: string,
  defaultStyle: StrictSvgProps['style']
): component(ref?: React.RefSetter<T>, ...P) {
  // NOTE: `debug-style` is not generated by `stylex.create`
  // so it needs a type-cast
  const debugStyle: CompiledStyles = {
    $$css: true,
    'debug::name': `svg-${TagName}` as $FlowFixMe
  };

  const component: React.AbstractComponent<P, T> = React.forwardRef(
    function (props, forwardedRef) {
      /**
       * get host props
       */
      const { style, ...hostProps } = props;
      validateStrictProps(hostProps);

      if (props.role != null) {
        // "presentation" synonym has wider browser support
        // $FlowFixMe
        hostProps.role = props.role === 'none' ? 'presentation' : props.role;
      }

      /**
       * get host style props
       */
      // Waiting on a diff so we can remove this indirection.
      const hostStyleProps: ReactDOMStyleProps = stylex.props([
        debugStyle,
        defaultStyle,
        style
      ]);

      /**
       * Construct tree
       *
       * Intentional flow error as we are asking for a more specific type
       * than React itself.
       */
      const element = (
        <TagName
          {...hostProps}
          {...hostStyleProps}
          ref={forwardedRef as $FlowFixMe}
        />
      );
      return element;
    }
  );

  component.displayName = `svg.${TagName}`;
  return component;
}
