diff --git a/node_modules/@stylexjs/stylex/lib/StyleXSheet.js b/node_modules/@stylexjs/stylex/lib/StyleXSheet.js
index 24f6592..db761b4 100644
--- a/node_modules/@stylexjs/stylex/lib/StyleXSheet.js
+++ b/node_modules/@stylexjs/stylex/lib/StyleXSheet.js
@@ -6,8 +6,6 @@ Object.defineProperty(exports, "__esModule", {
 exports.styleSheet = exports.StyleXSheet = void 0;
 var _invariant = _interopRequireDefault(require("invariant"));
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
-const LIGHT_MODE_CLASS_NAME = '__fb-light-mode';
-const DARK_MODE_CLASS_NAME = '__fb-dark-mode';
 function buildTheme(selector, theme) {
   const lines = [];
   lines.push(`${selector} {`);
@@ -32,15 +30,12 @@ function doesSupportCSSVariables() {
 }
 const VARIABLE_MATCH = /var\(--(.*?)\)/g;
 class StyleXSheet {
-  static LIGHT_MODE_CLASS_NAME = LIGHT_MODE_CLASS_NAME;
-  static DARK_MODE_CLASS_NAME = DARK_MODE_CLASS_NAME;
   constructor(opts) {
     this.tag = null;
     this.injected = false;
     this.ruleForPriority = new Map();
     this.rules = [];
-    this.rootTheme = opts.rootTheme;
-    this.rootDarkTheme = opts.rootDarkTheme;
+    this.rootTheme = null;
     this.supportsVariables = opts.supportsVariables ?? doesSupportCSSVariables();
   }
   getVariableMatch() {
@@ -70,20 +65,7 @@ class StyleXSheet {
       return;
     }
     this.injected = true;
-    if (globalThis.document?.body == null) {
-      this.injectTheme();
-      return;
-    }
     this.tag = makeStyleTag();
-    this.injectTheme();
-  }
-  injectTheme() {
-    if (this.rootTheme != null) {
-      this.insert(buildTheme(`:root, .${LIGHT_MODE_CLASS_NAME}`, this.rootTheme), 0);
-    }
-    if (this.rootDarkTheme != null) {
-      this.insert(buildTheme(`.${DARK_MODE_CLASS_NAME}:root, .${DARK_MODE_CLASS_NAME}`, this.rootDarkTheme), 0);
-    }
   }
   __injectCustomThemeForTesting(selector, theme) {
     if (theme != null) {
@@ -179,7 +161,5 @@ function addSpecificityLevel(selector, index) {
   return `${beforeCurly}${pseudo}${afterCurly}`;
 }
 const styleSheet = exports.styleSheet = new StyleXSheet({
-  supportsVariables: true,
-  rootTheme: {},
-  rootDarkTheme: {}
+  supportsVariables: true
 });
diff --git a/node_modules/@stylexjs/stylex/lib/es/StyleXSheet.mjs b/node_modules/@stylexjs/stylex/lib/es/StyleXSheet.mjs
index 67ea8ae..ec3e5af 100644
--- a/node_modules/@stylexjs/stylex/lib/es/StyleXSheet.mjs
+++ b/node_modules/@stylexjs/stylex/lib/es/StyleXSheet.mjs
@@ -54,8 +54,6 @@ var invariant_1 = invariant;
 
 var invariant$1 = /*@__PURE__*/getDefaultExportFromCjs(invariant_1);
 
-const LIGHT_MODE_CLASS_NAME = '__fb-light-mode';
-const DARK_MODE_CLASS_NAME = '__fb-dark-mode';
 function buildTheme(selector, theme) {
   const lines = [];
   lines.push(`${selector} {`);
@@ -80,15 +78,12 @@ function doesSupportCSSVariables() {
 }
 const VARIABLE_MATCH = /var\(--(.*?)\)/g;
 class StyleXSheet {
-  static LIGHT_MODE_CLASS_NAME = LIGHT_MODE_CLASS_NAME;
-  static DARK_MODE_CLASS_NAME = DARK_MODE_CLASS_NAME;
   constructor(opts) {
     this.tag = null;
     this.injected = false;
     this.ruleForPriority = new Map();
     this.rules = [];
-    this.rootTheme = opts.rootTheme;
-    this.rootDarkTheme = opts.rootDarkTheme;
+    this.rootTheme = null;
     this.supportsVariables = opts.supportsVariables ?? doesSupportCSSVariables();
   }
   getVariableMatch() {
@@ -118,20 +113,7 @@ class StyleXSheet {
       return;
     }
     this.injected = true;
-    if (globalThis.document?.body == null) {
-      this.injectTheme();
-      return;
-    }
     this.tag = makeStyleTag();
-    this.injectTheme();
-  }
-  injectTheme() {
-    if (this.rootTheme != null) {
-      this.insert(buildTheme(`:root, .${LIGHT_MODE_CLASS_NAME}`, this.rootTheme), 0);
-    }
-    if (this.rootDarkTheme != null) {
-      this.insert(buildTheme(`.${DARK_MODE_CLASS_NAME}:root, .${DARK_MODE_CLASS_NAME}`, this.rootDarkTheme), 0);
-    }
   }
   __injectCustomThemeForTesting(selector, theme) {
     if (theme != null) {
diff --git a/node_modules/@stylexjs/stylex/lib/stylex.js b/node_modules/@stylexjs/stylex/lib/stylex.js
index 7c9e41e..9481fda 100644
--- a/node_modules/@stylexjs/stylex/lib/stylex.js
+++ b/node_modules/@stylexjs/stylex/lib/stylex.js
@@ -4,8 +4,6 @@ Object.defineProperty(exports, "__esModule", {
   value: true
 });
 exports.__monkey_patch__ = __monkey_patch__;
-exports.attrs = attrs;
-exports.legacyMerge = exports.keyframes = exports.include = exports.firstThatWorks = exports.defineVars = exports.default = exports.createTheme = exports.create = void 0;
 exports.props = props;
 exports.types = void 0;
 var _styleq = require("styleq");
@@ -29,20 +27,6 @@ function props() {
   }
   return result;
 }
-function attrs() {
-  const {
-    className,
-    style
-  } = props(...arguments);
-  const result = {};
-  if (className != null && className !== '') {
-    result.class = className;
-  }
-  if (style != null && Object.keys(style).length > 0) {
-    result.style = Object.keys(style).map(key => `${key}:${style[key]};`).join('');
-  }
-  return result;
-}
 function stylexCreate(styles) {
   if (__implementations.create != null) {
     const create = __implementations.create;
@@ -62,16 +46,9 @@ const stylexCreateTheme = (baseTokens, overrides) => {
   }
   throw errorForFn('createTheme');
 };
-const stylexInclude = styles => {
-  if (__implementations.include) {
-    return __implementations.include(styles);
-  }
-  throw errorForFn('include');
-};
 const create = exports.create = stylexCreate;
 const defineVars = exports.defineVars = stylexDefineVars;
 const createTheme = exports.createTheme = stylexCreateTheme;
-const include = exports.include = stylexInclude;
 const types = exports.types = {
   angle: _v => {
     throw errorForType('angle');
@@ -135,11 +112,9 @@ function _stylex() {
   return className;
 }
 _stylex.props = props;
-_stylex.attrs = attrs;
 _stylex.create = create;
 _stylex.defineVars = defineVars;
 _stylex.createTheme = createTheme;
-_stylex.include = include;
 _stylex.keyframes = keyframes;
 _stylex.firstThatWorks = firstThatWorks;
 _stylex.types = types;
@@ -151,5 +126,4 @@ function __monkey_patch__(key, implementation) {
     __implementations[key] = implementation;
   }
 }
-const legacyMerge = exports.legacyMerge = _stylex;
 var _default = exports.default = _stylex;
